### 클래스 복습
-- 객체 지향언어 특징
//클래스는 객체(==Object)다.
public class Pizza{
    ##피자 클래스에는
    ##피자에 관련된 변수와 함수만 위치한다.
    ##클래스는 필드(전역)변수와 메소드로만 구성.
    int 햄;
    String 피자이름;

    public void 도우를만들다(){
        int x = 0;
        ..코드...
    }
}

public class 피자스쿨{
    ##조건) 클래스와 메소드를 실행해서 결과 값을 보고 싶을 때
    ##자바는 메인함수만 안다!
    ##파일을 불러올 때 메인함수에서 해야함!
    ##메소드도 메인함수에서 불러와야함.
    public static void main(String[] args){
        Pizza    치즈피자    =   new Pizza();
    <데이터타입> <변수이름> <대입>  <클래스>
        치즈피자.햄 = 100;
        
        치즈피자.햄 = "햄추가요!";
        -> 에러남 Pizza클래스에 햄은 int형으로 왔기때문
        // .을 찍어서 해당 클래스 변수 혹은 메소드 불러오기 가능!
        치즈피자.도우를만들다();

        새로운 피자를 만들려면 새로운 변수를 사용해야함
        ex) Pizza 불고기피자 = new Pizza();
            불고기피자.햄 = 50;

            불고기피자 = 치즈피자;
            //기존 불고기피자 데이터 없어짐.
            int x = 10;
            int y = 20;
            x = y; x가 20으로 대입되듯.
            // 클래스 데이터타입이기 때문에 배열선언 가능.

    }
}


public class 이태원클래스 {
	#총 이태원클래스는 필드(전역)변수 2개와 메소드 1개가 구성됨.
	#필드변수가 2개
    #실무에서는 필드변수를 private으로 함!
	String 주인공;
	String 동료;
	//메소드가 1개
	public void 학교를때려치다(String name) {
		#앞에 this가 붙은 변수는 필드변수로 생각!
		this.주인공 = name;
		System.out.println(name+"가 학교를 나갔습니다..");
	}

}

public static void main(String[] args) {
		이태원클래스 일부작 = new 이태원클래스();
		일부작.주인공 = "박새로이";
		일부작.동료 = "조이서";
		String name = 일부작.주인공;
		System.out.println(일부작.동료);
		일부작.학교를때려치다(name);
		
		이태원클래스 이부작 = new 이태원클래스();
		이부작.주인공 = "장근원이";
		이부작.동료 = "장대희";
		String name02 = 이부작.주인공;
		System.out.println(이부작.동료);
		이부작.학교를때려치다(name02);
		
		List<이태원클래스>list = new ArrayList<이태원클래스>();
		list.add(일부작);
		list.add(이부작);
		for(이태원클래스 이태원 : list) {
			System.out.println(이태원.동료);
		}
	}